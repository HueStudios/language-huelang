scopeName: 'source.huelang'
name: 'HueLang'
fileTypes: [ 'hue' ]
limitLineLength: false

patterns: [
  { include: '#blockComment' }
  { include: '#stringBlock' }
  {
    comment: ''
    name: 'storage.huelang'
    match: '(\\s|)\\[(\\s|)'
  }
  {
    comment: ''
    name: 'storage.huelang'
    match: '(\\s|)\\](\\s|)'
  }
  {
    comment: ''
    name: 'constant.huelang'
    match: '(\\s|)\\{(\\s|)'
  }
  {
    comment: ''
    name: 'constant.huelang'
    match: '(\\s|)\\}(\\s|)'
  }
  {
    comment: ''
    name: 'constant.numeric.huelang'
    match: '(\\s|)\\d+(\\s|)'
  }
  {
    comment: ''
    name: 'constant.other.huelang'
    match: '(\\s|):\\S+(\\s|)'
  }
  {
    comment: ''
    name: 'support.function.huelang'
    match: '(\\s|)#\\S+(\\s|)'
  }
  {
    comment: ''
    name: 'entity.name.function.huelang'
    match: '(\\s|)\\S+(\\s|)'
  }
]

repository:
  blockComment: {
    patterns: [
      {
        begin: '(\\s|)\\((\\s|)'
        beginCaptures:
          0:
            name: 'punctuation.definition.comment.begin.huelang'
        end: '(\\s|)\\)(\\s|)'
        endCaptures:
          0:
            name: 'punctuation.definition.comment.end.huelang'
        name: 'comment.block.huelang'
      }
    ]
  }
  stringBlock: {
    patterns: [
      {
        begin: '(\\s|)\\"(\\s|)'
        beginCaptures:
          0:
            name: 'string.start.huelang'
        end: '(\\s|)\\"(\\s|)'
        endCaptures:
          0:
            name: 'string.end.huelang'
        name: 'string.block.huelang'
      }
    ]
  }
