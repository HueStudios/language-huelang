scopeName: 'source.huelang'
name: 'HueLang'
fileTypes: [ 'hue' ]
limitLineLength: false

patterns: [
  {
    comment: ''
    name: 'keyword.control.huelang'
    match: '(\\s|)\\[(\\s|)'
  }
  {
    comment: ''
    name: 'keyword.control.huelang'
    match: '(\\s|)\\](\\s|)'
  }
  {
    comment: ''
    name: 'constant.language.huelang'
    match: '(\\s|)\\{(\\s|)'
  }
  {
    comment: ''
    name: 'constant.language.huelang'
    match: '(\\s|)\\}(\\s|)'
  }
  {
    comment: ''
    name: 'string.quoted.single.huelang'
    match: '(\\s|)"((\\s).*?(\\s)|\\s)"(\\s|)'
  }
  {
    comment: ''
    name: 'constant.numeric.huelang'
    match: '(\\s|)\\d+(\\s|)'
  }
  {
    comment: ''
    name: 'constant.other.huelang'
    match: '(\\s|):\\S+(\\s|)'
  }
  {
    comment: ''
    name: 'meta.function-call.huelang'
    match: '(\\s|)\\S+(\\s|)'
  }
  {
    comment: ''
    name: 'meta.preprocessor.huelang'
    match: '(\\s|)#\\S+(\\s|)'
  }
  {
    comment: ''
    name: 'comment.line.huelang'
    match: '(\\s|)\\(((\\s+).*?(\\s+)|\\s)\\)(\\s|)'
  }
  { include: '#blockComment' }
]


repository:
  blockComment: {
    name: 'meta.section.example'
    contentName: 'comment.line.huelang'
    begin: '(\\s|)\\((\\s|)'
    beginCaptures:
      0: name: 'comment.line.huelang'
    end: '(\\s|)\\)(\\s|)'
    endCaptures:
      0: name: 'comment.line.huelang'
    patterns: [{ include: '#blockComment' }]
  }
